#include "lxgui/gui_frame.hpp"
#include "lxgui/gui_backdrop.hpp"
#include "lxgui/gui_region.hpp"
#include "lxgui/gui_fontstring.hpp"
#include "lxgui/gui_texture.hpp"
#include "lxgui/gui_manager.hpp"
#include "lxgui/gui_out.hpp"

#include <lxgui/luapp_state.hpp>
#include <lxgui/luapp_function.hpp>

/** A @{UIObject} that can contain other objects and react to events.
*   This class, which is at the core of the UI design, can contain
*   other @{Frame}s as "children", and @{LayeredRegion}s sorted by layers
*   (text, images, ...). A frame can also react to events, and register
*   callbacks to be executed on particular events (key presses, etc.)
*   or on every tick.
*
*   Each frame has an optional "title region", which can be used to
*   define and draw a title bar. This title bar can then be used to
*   move the frame around the screen using mouse click and drag.
*   Furthermore, frames have optional support for resizing by click
*   and drag on corners or edges (opt in).
*
*   Frames can either move freely on the screen, or be "clamped" to the
*   screen so they cannot be partly outside of their render area.
*
*   __Rendering.__ Frames are grouped into different "strata", which are
*   rendered sequentially. Frames in a high strata will always be rendered
*   above frames in a low strata. Then, within a strata, frames are further
*   sorted by "level"; within this particular strata, a frame with a high
*   level will always be rendered above all frames with a lower level, but
*   it will still remain below other frames in a higher strata. The level
*   of a frame is automatically set to the maximum level inside the strata
*   when the frame is clicked, which effectively brings the frame to the
*   front.
*
*   __Children and regions.__ When a frame is hidden, all its children
*   and regions will also be hidden. Likewise, deleting a frame will
*   automatically delete all its children and regions, unless they are
*   detached first. Other than this, children and regions do not need to
*   be located inside the frame; this is controlled purely by their anchors.
*   Therefore, if a child is not anchored to its parent, moving the parent
*   will not automatically move the child.
*
*   __Events.__ Frames can react to events. For this to happen, a callback
*   function must be registered to handle the corresponding event. There are
*   two types of events. First: hard-coded UI events such as `OnKeyPress`
*   or `OnUpdate`, which are automatically triggered by lxgui. Second:
*   generic events, which can be triggered from various sources and all
*   forwarded to the `OnEvent` callback. Generic events are typically
*   generated by whatever application is being driven by lxgui (i.e., your
*   game), and they enable application-specific behavior (for example:
*   changing the UI when the player is under attack will likely require an
*   `"UNDER_ATTACK"` event).
*
*   To use the first type of events (hard-coded events), all you have to
*   do in general is register a callback function using @{Frame:set_script}.
*   However, some hard-coded events require explicit enabling. In particular:
*
*   - Events related to keyboard input (`OnKeyDown`, `OnKeyUp`) require
*   @{Frame:enable_keyboard}.
*   - Events related to mouse input (`OnDragStart`, `OnDragStop`,`OnEnter`,
*   `OnLeave`, `OnMouseUp`, `OnMouseDown`, `OnMouseWheel`, `OnReceiveDrag`)
*   require @{Frame:enable_mouse}.
*
*   To use the second type of events (generic events), you have to register
*   a callback for `OnEvent` _and_ register the frame for each generic event
*   you wish to listen to. This is done with @{Frame:register_event}.
*
*   Some events provide arguments to the registered callback function. For
*   example, the application can fire a `"UNIT_ATTACKED"` event when a unit
*   is under attack, and pass the ID of the attacked unit as a first argument,
*   and the ID of the attacker as a second argument. If a callback
*   function is registered using @{Frame:set_script}, these arguments can be
*   handled and named like regular function parameters. In XML callback
*   handlers, they can be accessed with the hard-coded generic names `arg1`,
*   `arg2`, etc.
*
*   Hard-coded events available to all @{Frame}s:
*
*   - `OnDragStart`: Triggered when one of the mouse button registered for
*   dragging (see @{Frame:register_for_drag}) has been pressed inside the
*   area of the screen occupied by the frame, and a mouse movement is first
*   recorded.
*   - `OnEnter`: Triggered when the mouse pointer enters into the area of
*   the screen occupied by the frame. Note: this only takes into account the
*   position and size of the frame and its title region, but not the space
*   occupied by its children or layered regions. Will not trigger if the
*   frame is hidden.
*   - `OnEvent`: Triggered when a registered generic event occurs. See
*   @{Frame:register_event}. To allow distinguishing which event has just
*   been fired, the registered callback function is always provided with a
*   first argument that is set to a string matching the event name. Further
*   arguments can be passed to the callback and are handled as for other events.
*   - `OnHide`: Triggered when @{UIObject:hide} is called, or when the frame
*   is hidden indirectly (for example if its parent is itself hidden). This
*   will only fire if the frame was previously shown.
*   - `OnKeyDown`: Triggered when any keyboard key is pressed. Will not
*   trigger if the frame is hidden. This event provides two arguments to
*   the registered callback: a number identifying the key, and the
*   human-readable name of the key.
*   - `OnKeyUp`: Triggered when any keyboard key is released. Will not
*   trigger if the frame is hidden. This event provides two arguments to
*   the registered callback: a number identifying the key, and the
*   human-readable name of the key.
*   - `OnLeave`: Triggered when the mouse pointer leaves the area of the
*   screen occupied by the frame. Note: this only takes into account the
*   position and size of the frame and its title region, but not the space
*   occupied by its children or layered regions. Will not trigger if the
*   frame is hidden, unless the frame was just hidden with the mouse
*   previously inside the frame.
*   - `OnLoad`: Triggered just after the frame is created. This is where
*   you would normally register for events and specific inputs, set up
*   initial states for extra logic, or do localization. When this event is
*   triggered, you can assume that all the frame's regions and children
*   have already been loaded. The same is true for other frames and regions
*   that are defined *earlier* in the same XML file, and those that are
*   defined in an addon listed *earlier* than the current addon in the
*   'addons.txt' file. In all other cases, frames or regions will not yet
*   be loaded when `OnLoad` is called, hence they cannot be refered to
*   (directly or indirectly).
*   - `OnMouseDown`: Triggered when any mouse button is pressed. Will not
*   trigger if the frame is hidden. This event provides one argument to
*   the registered callback: a string identifying the mouse button
*   (`"LeftButton"`, `"RightButton"`, or `"MiddleButton"`).
*   - `OnMouseUp`: Triggered when any mouse button is released. Will not
*   trigger if the frame is hidden. This event provides one argument to
*   the registered callback: a string identifying the mouse button
*   (`"LeftButton"`, `"RightButton"`, or `"MiddleButton"`).
*   - `OnMouseWheel`: Triggered when the mouse wheel is moved. This event
*   provides one argument to the registered callback: a number indicating by
*   how many "notches" the wheel has turned in this event. A positive value
*   means the wheel has been moved "away" from the user (this would normally
*   scroll *up* in a document).
*   - `OnReceiveDrag`: Triggered when the mouse pointer was previously
*   dragged onto the frame, and when one of the mouse button registered for
*   dragging (see @{Frame:register_for_drag}) is released. This enables
*   the "drop" in "drag and drop" operations.
*   - `OnShow`: Triggered when @{UIObject:show} is called, or when the frame
*   is shown indirectly (for example if its parent is itself shown). This
*   will only fire if the frame was previously hidden.
*   - `OnSizeChanged`: Triggered whenever the size of the frame changes, either
*   directly or indirectly. Be very careful not to call any function that could
*   change the size of the frame inside this callback, as this would generate
*   an infinite loop.
*   - `OnUpdate`: Triggered on every tick of the game loop. This event provides
*   one argument to the registered callback: a floating point number indicating
*   how much time has passed since the last call to `OnUpdate` (in seconds).
*   For optimal performance, prefer using other events types whenever possible.
*   `OnUpdate` callbacks will be executed over and over again, and can quickly
*   consume a lot of resources if user unreasonably. If you have to use
*   `OnUpdate`, you can mitigate performance problems by artificially reducing
*   the update rate: let the callback function only accumulate the time passed,
*   and wait until enough time has passed (say, half a second) to execute any
*   expensive operation. Then reset the accumulated time, and wait again.
*
*   Generic events fired natively by lxgui:
*
*   - `"LUA_ERROR"`: Triggered whenever a callback function or an addon script
*   file generates a Lua error. This event provides one argument to the
*   registered callback: a string containing the error message.
*   - `"ADDON_LOADED"`: Triggered when an addon is fully loaded. This event
*   provides one argument to the registered callback: a string containing the
*   name of the loaded addon.
*   - `"ENTERING_WORLD"`: Triggered once at the start of the program, at the
*   end of the first update tick.
*
*   __Virtual frames.__ Virtual frames are not displayed on the screen,
*   and technically are not part of the interface. They are only available
*   as "templates" that can be reused by other (virtual or non-virtual)
*   frames. This is useful for defining a few frame templates with a
*   particular style, and then reuse these templates across the interface
*   to ensure a consistent look. When inheriting from a virtual frame,
*   the inheriting frame will copy all the registered callbacks, all the
*   child frames, and all the layered regions of the virtual frame.
*
*   Inherits all methods from: @{UIObject}.
*
*   Child classes: @{Button}, @{CheckButton}, @{FocusFrame}, @{EditBox},
*   @{ScrollFrame}, @{Slider}, @{StatusBar}.
*   @classmod Frame
*/

namespace lxgui {
namespace gui
{
lua_frame::lua_frame(lua_State* pLua) : lua_uiobject(pLua)
{
}

/** @function create_font_string
*/
int lua_frame::_create_font_string(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:create_font_string", pLua, 1);
    mFunc.add(0, "name", lua::type::STRING);
    mFunc.add(1, "layer", lua::type::STRING, true);
    mFunc.add(2, "inherits", lua::type::STRING, true);

    if (mFunc.check())
    {
        std::string sName = mFunc.get(0)->get_string();

        layer_type mLayer;
        if (mFunc.is_provided(1) && mFunc.get(1)->get_type() == lua::type::STRING)
            mLayer = layer::get_layer_type(mFunc.get(1)->get_string());
        else
            mLayer = layer_type::ARTWORK;

        std::string sInheritance;
        if (mFunc.is_provided(2))
            sInheritance = mFunc.get(2)->get_string();

        region* pRegion = get_object()->create_region(
            mLayer, "FontString", sName,
            get_object()->get_manager()->get_virtual_uiobject_list(sInheritance)
        );

        if (pRegion)
        {
            pRegion->push_on_lua(mFunc.get_state());
            mFunc.notify_pushed();
        }
        else
            mFunc.push_nil();
    }

    return mFunc.on_return();
}

/** @function create_texture
*/
int lua_frame::_create_texture(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:create_texture", pLua, 1);
    mFunc.add(0, "name", lua::type::STRING);
    mFunc.add(1, "layer", lua::type::STRING, true);
    mFunc.add(2, "inherits", lua::type::STRING, true);

    if (mFunc.check())
    {
        std::string sName = mFunc.get(0)->get_string();

        layer_type mLayer;
        if (mFunc.is_provided(1) && mFunc.get(1)->get_type() == lua::type::STRING)
            mLayer = layer::get_layer_type(mFunc.get(1)->get_string());
        else
            mLayer = layer_type::ARTWORK;

        std::string sInheritance;
        if (mFunc.is_provided(2))
            sInheritance = mFunc.get(2)->get_string();

        region* pRegion = get_object()->create_region(
            mLayer, "Texture", sName,
            get_object()->get_manager()->get_virtual_uiobject_list(sInheritance)
        );

        if (pRegion)
        {
            pRegion->push_on_lua(mFunc.get_state());
            mFunc.notify_pushed();
        }
        else
            mFunc.push_nil();
    }

    return mFunc.on_return();
}

/** @function create_title_region
*/
int lua_frame::_create_title_region(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:create_title_region", pLua);

    get_object()->create_title_region();

    return mFunc.on_return();
}

/** @function disable_draw_layer
*/
int lua_frame::_disable_draw_layer(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:disable_draw_layer", pLua);
    mFunc.add(0, "layer", lua::type::STRING);
    if (mFunc.check())
    {
        std::string sLayer = mFunc.get(0)->get_string();
        if (sLayer == "BACKGROUND")
            get_object()->disable_draw_layer(layer_type::BACKGROUND);
        else if (sLayer == "BORDER")
            get_object()->disable_draw_layer(layer_type::BORDER);
        else if (sLayer == "ARTWORK")
            get_object()->disable_draw_layer(layer_type::ARTWORK);
        else if (sLayer == "OVERLAY")
            get_object()->disable_draw_layer(layer_type::OVERLAY);
        else if (sLayer == "HIGHLIGHT")
            get_object()->disable_draw_layer(layer_type::HIGHLIGHT);
        else
            gui::out << gui::warning << mFunc.get_name() << " : Unknown layer : \"" << sLayer << "\"." << std::endl;
    }

    return mFunc.on_return();
}

/** @function enable_draw_layer
*/
int lua_frame::_enable_draw_layer(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:enable_draw_layer", pLua);
    mFunc.add(0, "layer", lua::type::STRING);
    if (mFunc.check())
    {
        std::string sLayer = mFunc.get(0)->get_string();
        if (sLayer == "BACKGROUND")
            get_object()->enable_draw_layer(layer_type::BACKGROUND);
        else if (sLayer == "BORDER")
            get_object()->enable_draw_layer(layer_type::BORDER);
        else if (sLayer == "ARTWORK")
            get_object()->enable_draw_layer(layer_type::ARTWORK);
        else if (sLayer == "OVERLAY")
            get_object()->enable_draw_layer(layer_type::OVERLAY);
        else if (sLayer == "HIGHLIGHT")
            get_object()->enable_draw_layer(layer_type::HIGHLIGHT);
        else
            gui::out << gui::warning << mFunc.get_name() << " : Unknown layer : \"" << sLayer << "\"." << std::endl;
    }

    return mFunc.on_return();
}

/** @function enable_keyboard
*/
int lua_frame::_enable_keyboard(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:enable_keyboard", pLua);
    mFunc.add(0, "is keyboard enable", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->enable_keyboard(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function enable_mouse
*/
int lua_frame::_enable_mouse(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:enable_mouse", pLua);
    mFunc.add(0, "is mouse enabled", lua::type::BOOLEAN);
    mFunc.add(1, "is world input allowed", lua::type::BOOLEAN, true);
    if (mFunc.check())
    {
        if (mFunc.is_provided(1))
            get_object()->enable_mouse(mFunc.get(0)->get_bool(), mFunc.get(1)->get_bool());
        else
            get_object()->enable_mouse(mFunc.get(0)->get_bool());
    }

    return mFunc.on_return();
}

/** @function enable_mouse_wheel
*/
int lua_frame::_enable_mouse_wheel(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:enable_mouse_wheel", pLua);
    mFunc.add(0, "is mouse wheel enabled", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->enable_mouse_wheel(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function get_backdrop
*/
int lua_frame::_get_backdrop(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_backdrop", pLua, 1);

    backdrop* pBackdrop = get_object()->get_backdrop();
    if (pBackdrop)
    {
        lua::state& mState = mFunc.get_state();

        mState.new_table();
        mState.set_field_string("bgFile", pBackdrop->get_background_file());
        mState.set_field_string("edgeFile", pBackdrop->get_edge_file());
        mState.set_field_bool("tile", pBackdrop->is_background_tilling());

        mState.set_field_double("tileSize", pBackdrop->get_tile_size());
        mState.set_field_double("edgeSize", pBackdrop->get_edge_size());

        mState.new_table();
        mState.set_field("insets");
        mState.get_field("insets");

        const quad2f& lInsets = pBackdrop->get_background_insets();
        mState.set_field_double("left",   lInsets.left);
        mState.set_field_double("right",  lInsets.right);
        mState.set_field_double("top",    lInsets.top);
        mState.set_field_double("bottom", lInsets.bottom);

        mState.pop();

        mFunc.notify_pushed();
    }
    else
        mFunc.push_nil();

    return mFunc.on_return();
}

/** @function get_backdrop_border_color
*/
int lua_frame::_get_backdrop_border_color(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_backdrop_border_color", pLua, 4);

    if (get_object()->get_backdrop())
    {
        const color& mColor = get_object()->get_backdrop()->get_edge_color();
        mFunc.push(mColor.r);
        mFunc.push(mColor.g);
        mFunc.push(mColor.b);
        mFunc.push(mColor.a);
    }
    else
        mFunc.push_nil(4);

    return mFunc.on_return();
}

/** @function get_backdrop_color
*/
int lua_frame::_get_backdrop_color(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_backdrop_color", pLua, 4);

    if (get_object()->get_backdrop())
    {
        const color& mColor = get_object()->get_backdrop()->get_background_color();
        mFunc.push(mColor.r);
        mFunc.push(mColor.g);
        mFunc.push(mColor.b);
        mFunc.push(mColor.a);
    }
    else
        mFunc.push_nil(4);

    return mFunc.on_return();
}

/** @function get_children
*/
int lua_frame::_get_children(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_children", pLua, get_object()->get_num_children());

    for (auto* pChild : get_object()->get_children())
    {
        pChild->push_on_lua(mFunc.get_state());
        mFunc.notify_pushed();
    }

    return mFunc.on_return();
}

/** @function get_effective_alpha
*/
int lua_frame::_get_effective_alpha(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_effective_alpha", pLua, 1);

    mFunc.push(get_object()->get_effective_alpha());

    return mFunc.on_return();
}

/** @function get_effective_scale
*/
int lua_frame::_get_effective_scale(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_effective_scale", pLua, 1);

    mFunc.push(get_object()->get_effective_scale());

    return mFunc.on_return();
}

/** @function get_frame_level
*/
int lua_frame::_get_frame_level(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_frame_level", pLua, 1);

    mFunc.push(get_object()->get_level());

    return mFunc.on_return();
}

/** @function get_frame_strata
*/
int lua_frame::_get_frame_strata(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_frame_strata", pLua, 1);

    frame_strata mStrata = get_object()->get_frame_strata();
    std::string sStrata;

    if (mStrata == frame_strata::BACKGROUND)
        sStrata = "BACKGROUND";
    else if (mStrata == frame_strata::LOW)
        sStrata = "LOW";
    else if (mStrata == frame_strata::MEDIUM)
        sStrata = "MEDIUM";
    else if (mStrata == frame_strata::HIGH)
        sStrata = "HIGH";
    else if (mStrata == frame_strata::DIALOG)
        sStrata = "DIALOG";
    else if (mStrata == frame_strata::FULLSCREEN)
        sStrata = "FULLSCREEN";
    else if (mStrata == frame_strata::FULLSCREEN_DIALOG)
        sStrata = "FULLSCREEN_DIALOG";
    else if (mStrata == frame_strata::TOOLTIP)
        sStrata = "TOOLTIP";

    mFunc.push(sStrata);

    return mFunc.on_return();
}

/** @function get_frame_type
*/
int lua_frame::_get_frame_type(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_frame_type", pLua, 1);

    mFunc.push(get_object()->get_frame_type());

    return mFunc.on_return();
}

/** @function get_hit_rect_insets
*/
int lua_frame::_get_hit_rect_insets(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_hit_rect_inset", pLua, 4);

    const quad2f& lInsets = get_object()->get_abs_hit_rect_insets();

    mFunc.push(lInsets.left);
    mFunc.push(lInsets.right);
    mFunc.push(lInsets.top);
    mFunc.push(lInsets.bottom);

    return mFunc.on_return();
}

/** @function get_id
*/
int lua_frame::_get_id(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_id", pLua, 1);

    mFunc.push(get_object()->get_id());

    return mFunc.on_return();
}

/** @function get_max_resize
*/
int lua_frame::_get_max_resize(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_max_resize", pLua, 2);

    vector2f lMax = get_object()->get_max_resize();

    mFunc.push(lMax.x);
    mFunc.push(lMax.y);

    return mFunc.on_return();
}

/** @function get_min_resize
*/
int lua_frame::_get_min_resize(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_min_resize", pLua, 2);

    vector2f lMin = get_object()->get_min_resize();

    mFunc.push(lMin.x);
    mFunc.push(lMin.y);

    return mFunc.on_return();
}

/** @function get_num_children
*/
int lua_frame::_get_num_children(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_num_children", pLua, 1);

    mFunc.push(get_object()->get_num_children());

    return mFunc.on_return();
}

/** @function get_num_regions
*/
int lua_frame::_get_num_regions(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_num_regions", pLua, 1);

    mFunc.push(get_object()->get_num_regions());

    return mFunc.on_return();
}

/** @function get_scale
*/
int lua_frame::_get_scale(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_scale", pLua, 1);

    mFunc.push(get_object()->get_scale());

    return mFunc.on_return();
}

/** @function get_script
*/
int lua_frame::_get_script(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_script", pLua, 1);
    mFunc.add(0, "script name", lua::type::STRING);
    if (mFunc.check())
    {
        std::string sScriptName = mFunc.get(0)->get_string();
        std::string sAdjustedScriptName = frame::get_adjusted_script_name(sScriptName);
        if (get_object()->has_script(sScriptName))
        {
            lua_getglobal(pLua, (get_object()->get_name() + ":" + sAdjustedScriptName).c_str());
            mFunc.notify_pushed();
        }
    }

    return mFunc.on_return();
}

/** @function get_title_region
*/
int lua_frame::_get_title_region(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:get_title_region", pLua, 1);

    if (get_object()->get_title_region())
    {
        get_object()->get_title_region()->push_on_lua(mFunc.get_state());
        mFunc.notify_pushed();
    }
    else
        mFunc.push_nil();

    return mFunc.on_return();
}

/** @function has_script
*/
int lua_frame::_has_script(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:has_script", pLua, 1);
    mFunc.add(0, "script name", lua::type::STRING);
    if (mFunc.check())
        mFunc.push(get_object()->can_use_script(mFunc.get(0)->get_string()));

    return mFunc.on_return();
}

/** @function is_clamped_to_screen
*/
int lua_frame::_is_clamped_to_screen(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_clamped_to_screen", pLua, 1);

    mFunc.push(get_object()->is_clamped_to_screen());

    return mFunc.on_return();
}

/** @function is_frame_type
*/
int lua_frame::_is_frame_type(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_frame_type", pLua, 1);
    mFunc.add(0, "Frame type", lua::type::STRING);
    if (mFunc.check())
    {
        if (get_object()->get_frame_type() == mFunc.get(0)->get_string())
            mFunc.push(bool(true));
        else
            mFunc.push(bool(false));
    }

    return mFunc.on_return();
}

/** @function is_keyboard_enabled
*/
int lua_frame::_is_keyboard_enabled(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_keyboard_enabled", pLua, 1);

    mFunc.push(get_object()->is_keyboard_enabled());

    return mFunc.on_return();
}

/** @function is_mouse_enabled
*/
int lua_frame::_is_mouse_enabled(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_mouse_enabled", pLua, 1);

    mFunc.push(get_object()->is_mouse_enabled());

    return mFunc.on_return();
}

/** @function is_mouse_wheel_enabled
*/
int lua_frame::_is_mouse_wheel_enabled(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_mouse_wheel_enabled", pLua, 1);

    mFunc.push(get_object()->is_mouse_wheel_enabled());

    return mFunc.on_return();
}

/** @function is_movable
*/
int lua_frame::_is_movable(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_movable", pLua, 1);

    mFunc.push(get_object()->is_movable());

    return mFunc.on_return();
}

/** @function is_resizable
*/
int lua_frame::_is_resizable(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_resizable", pLua, 1);

    mFunc.push(get_object()->is_resizable());

    return mFunc.on_return();
}

/** @function is_top_level
*/
int lua_frame::_is_top_level(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_top_level", pLua, 1);

    mFunc.push(get_object()->is_top_level());

    return mFunc.on_return();
}

/** @function is_user_placed
*/
int lua_frame::_is_user_placed(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:is_user_placed", pLua, 1);

    mFunc.push(get_object()->is_user_placed());

    return mFunc.on_return();
}

/** @function raise
*/
int lua_frame::_raise(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:raise", pLua);

    get_object()->raise();

    return mFunc.on_return();
}

/** @function register_all_events
*/
int lua_frame::_register_all_events(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:register_all_events", pLua);

    get_object()->register_all_events();

    return mFunc.on_return();
}

/** @function register_event
*/
int lua_frame::_register_event(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:register_event", pLua);
    mFunc.add(0, "event name", lua::type::STRING);
    if (mFunc.check())
        get_object()->register_event(mFunc.get(0)->get_string());

    return mFunc.on_return();
}

/** @function register_for_drag
*/
int lua_frame::_register_for_drag(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:register_for_drag", pLua);
    mFunc.add(0, "button 1", lua::type::STRING, true);
    mFunc.add(1, "button 2", lua::type::STRING, true);
    mFunc.add(2, "button 3", lua::type::STRING, true);
    if (mFunc.check())
    {
        std::vector<std::string> lButtonList;
        for (uint i = 0; i < 3; ++i)
        {
            if (mFunc.is_provided(i))
                lButtonList.push_back(mFunc.get(i)->get_string());
            else
                break;
        }
        get_object()->register_for_drag(lButtonList);
    }

    return mFunc.on_return();
}

/** @function set_backdrop
*/
int lua_frame::_set_backdrop(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_backdrop", pLua);
    mFunc.add(0, "backdrop table", lua::type::TABLE);
    mFunc.add(0, "nil", lua::type::NIL);
    if (mFunc.check())
    {
        if (mFunc.get(0)->get_type() == lua::type::NIL)
        {
            get_object()->set_backdrop(nullptr);
        }
        else
        {
            std::unique_ptr<backdrop> pBackdrop(new backdrop(get_object()));

            lua::state& mState = mFunc.get_state();
            manager* pManager = manager::get_manager(mState);

            pBackdrop->set_background(pManager->parse_file_name(mState.get_field_string("bgFile", false, "")));
            pBackdrop->set_edge(pManager->parse_file_name(mState.get_field_string("edgeFile", false, "")));
            pBackdrop->set_background_tilling(mState.get_field_bool("tile", false, false));

            float fTileSize = static_cast<float>(mState.get_field_double("tileSize", false, 0.0));
            if (fTileSize != 0)
                pBackdrop->set_tile_size(fTileSize);

            float fEdgeSize = static_cast<float>(mState.get_field_double("edgeSize", false, 0.0));
            if (fEdgeSize != 0)
                pBackdrop->set_edge_size(fEdgeSize);

            mState.get_field("insets");

            if (mState.get_type() == lua::type::TABLE)
            {
                pBackdrop->set_background_insets(quad2f(
                    mState.get_field_double("left",   false, 0),
                    mState.get_field_double("right",  false, 0),
                    mState.get_field_double("top",    false, 0),
                    mState.get_field_double("bottom", false, 0)
                ));
            }

            get_object()->set_backdrop(std::move(pBackdrop));
        }
    }

    return mFunc.on_return();
}

/** @function set_backdrop_border_color
*/
int lua_frame::_set_backdrop_border_color(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_backdrop_border_color", pLua);
    mFunc.add(0, "red", lua::type::NUMBER);
    mFunc.add(1, "green", lua::type::NUMBER);
    mFunc.add(2, "blue", lua::type::NUMBER);
    mFunc.add(3, "alpha", lua::type::NUMBER, true);
    mFunc.new_param_set();
    mFunc.add(0, "color", lua::type::STRING);

    if (mFunc.check())
    {
        backdrop* pBackdrop = get_object()->get_backdrop();
        if (!pBackdrop)
        {
            get_object()->set_backdrop(std::unique_ptr<backdrop>(new backdrop(get_object())));
            pBackdrop = get_object()->get_backdrop();
        }

        color mColor;
        if (mFunc.get_param_set_rank() == 0)
        {
            if (mFunc.is_provided(3))
            {
                mColor = color(
                    mFunc.get(0)->get_number(),
                    mFunc.get(1)->get_number(),
                    mFunc.get(2)->get_number(),
                    mFunc.get(3)->get_number()
                );
            }
            else
            {
                mColor = color(
                    mFunc.get(0)->get_number(),
                    mFunc.get(1)->get_number(),
                    mFunc.get(2)->get_number()
                );
            }
        }
        else
            mColor = color(mFunc.get(0)->get_string());

        pBackdrop->set_edge_color(mColor);
    }

    return mFunc.on_return();
}

/** @function set_backdrop_color
*/
int lua_frame::_set_backdrop_color(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_backdrop_color", pLua);
    mFunc.add(0, "red", lua::type::NUMBER);
    mFunc.add(1, "green", lua::type::NUMBER);
    mFunc.add(2, "blue", lua::type::NUMBER);
    mFunc.add(3, "alpha", lua::type::NUMBER, true);
    mFunc.new_param_set();
    mFunc.add(0, "color", lua::type::STRING);

    if (mFunc.check())
    {
        backdrop* pBackdrop = get_object()->get_backdrop();
        if (!pBackdrop)
        {
            get_object()->set_backdrop(std::unique_ptr<backdrop>(new backdrop(get_object())));
            pBackdrop = get_object()->get_backdrop();
        }

        color mColor;
        if (mFunc.get_param_set_rank() == 0)
        {
            if (mFunc.is_provided(3))
            {
                mColor = color(
                    mFunc.get(0)->get_number(),
                    mFunc.get(1)->get_number(),
                    mFunc.get(2)->get_number(),
                    mFunc.get(3)->get_number()
                );
            }
            else
            {
                mColor = color(
                    mFunc.get(0)->get_number(),
                    mFunc.get(1)->get_number(),
                    mFunc.get(2)->get_number()
                );
            }
        }
        else
            mColor = color(mFunc.get(0)->get_string());

        pBackdrop->set_background_color(mColor);
    }

    return mFunc.on_return();
}


/** @function set_clamped_to_screen
*/
int lua_frame::_set_clamped_to_screen(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_clamped_to_screen", pLua);
    mFunc.add(0, "is clamped to screen", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->set_clamped_to_screen(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function set_frame_level
*/
int lua_frame::_set_frame_level(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_frame_level", pLua);
    mFunc.add(0, "level", lua::type::NUMBER);
    if (mFunc.check())
        get_object()->set_level(mFunc.get(0)->get_int());

    return mFunc.on_return();
}

/** @function set_frame_strata
*/
int lua_frame::_set_frame_strata(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_frame_strata", pLua);
    mFunc.add(0, "strata", lua::type::STRING);
    if (mFunc.check())
        get_object()->set_frame_strata(mFunc.get(0)->get_string());

    return mFunc.on_return();
}

/** @function set_hit_rect_insets
*/
int lua_frame::_set_hit_rect_insets(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_hit_rect_insets", pLua);
    mFunc.add(0, "left", lua::type::NUMBER);
    mFunc.add(1, "right", lua::type::NUMBER);
    mFunc.add(2, "top", lua::type::NUMBER);
    mFunc.add(3, "bottom", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_abs_hit_rect_insets(
            mFunc.get(0)->get_number(),
            mFunc.get(1)->get_number(),
            mFunc.get(2)->get_number(),
            mFunc.get(3)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_max_resize
*/
int lua_frame::_set_max_resize(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_max_resize", pLua);
    mFunc.add(0, "width", lua::type::NUMBER);
    mFunc.add(1, "height", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_max_resize(
            mFunc.get(0)->get_number(),
            mFunc.get(1)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_min_resize
*/
int lua_frame::_set_min_resize(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_min_resize", pLua);
    mFunc.add(0, "width", lua::type::NUMBER);
    mFunc.add(1, "height", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_min_resize(
            mFunc.get(0)->get_number(),
            mFunc.get(1)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_max_width
*/
int lua_frame::_set_max_width(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_max_width", pLua);
    mFunc.add(0, "width", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_max_width(
            mFunc.get(0)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_max_height
*/
int lua_frame::_set_max_height(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_max_height", pLua);
    mFunc.add(0, "height", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_max_height(
            mFunc.get(0)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_min_width
*/
int lua_frame::_set_min_width(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_min_width", pLua);
    mFunc.add(0, "width", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_min_width(
            mFunc.get(0)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_min_height
*/
int lua_frame::_set_min_height(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_min_height", pLua);
    mFunc.add(0, "height", lua::type::NUMBER);
    if (mFunc.check())
    {
        get_object()->set_min_height(
            mFunc.get(0)->get_number()
        );
    }

    return mFunc.on_return();
}

/** @function set_movable
*/
int lua_frame::_set_movable(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_movable", pLua);
    mFunc.add(0, "is movable", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->set_movable(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function set_resizable
*/
int lua_frame::_set_resizable(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_resizable", pLua);
    mFunc.add(0, "is resizable", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->set_resizable(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function set_scale
*/
int lua_frame::_set_scale(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_scale", pLua);
    mFunc.add(0, "scale", lua::type::NUMBER);
    if (mFunc.check())
        get_object()->set_scale(mFunc.get(0)->get_number());

    return mFunc.on_return();
}

/** @function set_script
*/
int lua_frame::_set_script(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_script", pLua);
    mFunc.add(0, "script name", lua::type::STRING);
    mFunc.add(1, "function", lua::type::FUNCTION, true);
    mFunc.add(1, "nil", lua::type::NIL, true);
    if (mFunc.check())
    {
        std::string sScriptName = mFunc.get(0)->get_string();
        std::string sAdjustedScriptName = frame::get_adjusted_script_name(sScriptName);
        if (get_object()->can_use_script(sScriptName))
        {
            lua::state& mState = mFunc.get_state();
            lua::argument* pArg = mFunc.get(1);
            if (pArg->is_provided() && pArg->get_type() == lua::type::FUNCTION)
            {
                mState.push_value(pArg->get_index());
                mState.set_global(get_object()->get_name() + ":" + sAdjustedScriptName);
                get_object()->notify_script_defined(sScriptName, true);
            }
            else
            {
                mState.push_nil();
                mState.set_global(get_object()->get_name() + ":" + sAdjustedScriptName);
                get_object()->notify_script_defined(sScriptName, false);
            }
        }
        else
        {
            gui::out << gui::error << get_object()->get_frame_type() << " : "
                << "\"" << get_object()->get_name() << "\" cannot use script \"" << sScriptName << "\"." << std::endl;
        }
    }

    return mFunc.on_return();
}

/** @function set_top_level
*/
int lua_frame::_set_top_level(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_top_level", pLua);
    mFunc.add(0, "is top level", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->set_top_level(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function set_user_placed
*/
int lua_frame::_set_user_placed(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:set_user_placed", pLua);
    mFunc.add(0, "is user placed", lua::type::BOOLEAN);
    if (mFunc.check())
        get_object()->set_user_placed(mFunc.get(0)->get_bool());

    return mFunc.on_return();
}

/** @function start_moving
*/
int lua_frame::_start_moving(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:start_moving", pLua);

    get_object()->start_moving();

    return mFunc.on_return();
}

/** @function start_sizing
*/
int lua_frame::_start_sizing(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:start_sizing", pLua);
    mFunc.add(0, "point", lua::type::STRING);
    if (mFunc.check())
        get_object()->start_sizing(anchor::get_anchor_point(mFunc.get(0)->get_string()));

    return mFunc.on_return();
}

/** @function stop_moving_or_sizing
*/
int lua_frame::_stop_moving_or_sizing(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:stop_moving_or_sizing", pLua);

    get_object()->stop_moving();
    get_object()->stop_sizing();

    return mFunc.on_return();
}

/** @function unregister_all_events
*/
int lua_frame::_unregister_all_events(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:unregister_all_events", pLua);

    get_object()->unregister_all_events();

    return mFunc.on_return();
}

/** @function unregister_event
*/
int lua_frame::_unregister_event(lua_State* pLua)
{
    if (!check_object_())
        return 0;

    lua::function mFunc("Frame:unregister_event", pLua);
    mFunc.add(0, "event name", lua::type::STRING);
    if (mFunc.check())
        get_object()->unregister_event(mFunc.get(0)->get_string());

    return mFunc.on_return();
}
}
}
